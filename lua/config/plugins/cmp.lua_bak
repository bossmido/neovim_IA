--   'hrsh7th/nvim-cmp',
--   dependencies = {
--     'L3MON4D3/LuaSnip',
--     'saadparwaiz1/cmp_luasnip',
--     'rafamadriz/friendly-snippets', -- optional but recommended
--   }
--   ,setup = function()
--       require("luasnip.loaders.from_vscode").lazy_load()
--   end,
-- }
--
--
return {
    'hrsh7th/nvim-cmp',
    dependencies = {
        'L3MON4D3/LuaSnip',
        'saadparwaiz1/cmp_luasnip',
        'rafamadriz/friendly-snippets',
        'onsails/lspkind-nvim'
    },
    event = 'InsertEnter', -- lazy-load on first insert mode usage
    config = function()
        local cmp = require('cmp')
        local luasnip = require('luasnip')
        -- Load snippets lazily
        require('luasnip.loaders.from_vscode').lazy_load()
        local lspkind = require("lspkind")

        local capabilities = vim.lsp.protocol.make_client_capabilities()
        capabilities.textDocument.completion = nil
        cmp.setup({
            window = {
                completion = cmp.config.window.bordered({ border = "rounded" }),
                documentation = cmp.config.window.bordered({ border = "rounded" }),
            },
            formatting = {
                format = lspkind.cmp_format({
                    mode = "symbol_text",
                    maxwidth = 50,
                    ellipsis_char = "...",
                }),
            },
            snippet = {
                expand = function(args)
                    luasnip.lsp_expand(args.body)
                end,
            },
            mapping = cmp.mapping.preset.insert({
                ['<C-p>'] = cmp.mapping.select_prev_item(),
                ['<C-n>'] = cmp.mapping.select_next_item(),
                ["<C-b>"] = cmp.mapping.scroll_docs(-4),
                ["<C-f>"] = cmp.mapping.scroll_docs(4),
                ["<C-Space>"] = cmp.mapping.complete(),
                ["<C-e>"] = cmp.mapping.abort(),
                ["<CR>"] = cmp.mapping.confirm({ select = true }),
                ['<Tab>'] = cmp.mapping(function(fallback)
                    if cmp.visible() then
                        cmp.select_next_item()
                    elseif luasnip.expand_or_jumpable() then
                        luasnip.expand_or_jump()
                    else
                        fallback()
                    end
                end, { 'i', 's' }),

                ['<S-Tab>'] = cmp.mapping(function(fallback)
                    if cmp.visible() then
                        cmp.select_prev_item()
                    elseif luasnip.jumpable(-1) then
                        luasnip.jump(-1)
                    else
                        fallback()
                    end
                end, { 'i', 's' }),

            }),
            sources = cmp.config.sources({
                { name = "copilot" },
                { name = 'nvim_lsp' },
                { name = 'luasnip' },
                { name = 'buffer' },
                { name = 'path' },
            }),
            cmp.setup.filetype("lua", {
                sources = cmp.config.sources({

                    { name = "nvim_lsp" },
                    { name = "buffer" },
                    { name = "path" },
                    -- no luasnip here

                }),
            })
        })
    end
}
